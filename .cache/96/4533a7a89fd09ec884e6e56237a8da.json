{"id":"node_modules/parse-torrent/index.js","dependencies":[{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\package.json","includedInParent":true,"mtime":1596059326965},{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\parse-torrent\\package.json","includedInParent":true,"mtime":1596059322605},{"name":"bencode","loc":{"line":4,"column":24},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\parse-torrent\\index.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\bencode\\lib\\index.js"},{"name":"blob-to-buffer","loc":{"line":5,"column":29},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\parse-torrent\\index.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\blob-to-buffer\\index.js"},{"name":"fs","loc":{"line":6,"column":19},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\parse-torrent\\index.js","resolved":"C:\\Users\\Tate\\AppData\\Roaming\\npm\\node_modules\\parcel\\src\\builtins\\_empty.js"},{"name":"simple-get","loc":{"line":7,"column":20},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\parse-torrent\\index.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\simple-get\\index.js"},{"name":"magnet-uri","loc":{"line":8,"column":23},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\parse-torrent\\index.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\magnet-uri\\index.js"},{"name":"path","loc":{"line":9,"column":21},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\parse-torrent\\index.js","resolved":"C:\\Users\\Tate\\AppData\\Roaming\\npm\\node_modules\\parcel\\node_modules\\path-browserify\\index.js"},{"name":"simple-sha1","loc":{"line":10,"column":21},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\parse-torrent\\index.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\simple-sha1\\browser.js"},{"name":"buffer","parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\parse-torrent\\index.js","resolved":"C:\\Users\\Tate\\AppData\\Roaming\\npm\\node_modules\\parcel\\node_modules\\buffer\\index.js"},{"name":"process","parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\parse-torrent\\index.js","resolved":"C:\\Users\\Tate\\AppData\\Roaming\\npm\\node_modules\\parcel\\node_modules\\process\\browser.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nvar process = require(\"process\");\n/*! parse-torrent. MIT License. WebTorrent LLC <https://webtorrent.io/opensource> */\n/* global Blob */\n\nconst bencode = require('bencode')\nconst blobToBuffer = require('blob-to-buffer')\nconst fs = require('fs') // browser exclude\nconst get = require('simple-get')\nconst magnet = require('magnet-uri')\nconst path = require('path')\nconst sha1 = require('simple-sha1')\n\nmodule.exports = parseTorrent\nmodule.exports.remote = parseTorrentRemote\n\nmodule.exports.toMagnetURI = magnet.encode\nmodule.exports.toTorrentFile = encodeTorrentFile\n\n/**\n * Parse a torrent identifier (magnet uri, .torrent file, info hash)\n * @param  {string|Buffer|Object} torrentId\n * @return {Object}\n */\nfunction parseTorrent (torrentId) {\n  if (typeof torrentId === 'string' && /^(stream-)?magnet:/.test(torrentId)) {\n    // if magnet uri (string)\n    const torrentObj = magnet(torrentId)\n\n    // infoHash won't be defined if a non-bittorrent magnet is passed\n    if (!torrentObj.infoHash) {\n      throw new Error('Invalid torrent identifier')\n    }\n\n    return torrentObj\n  } else if (typeof torrentId === 'string' && (/^[a-f0-9]{40}$/i.test(torrentId) || /^[a-z2-7]{32}$/i.test(torrentId))) {\n    // if info hash (hex/base-32 string)\n    return magnet(`magnet:?xt=urn:btih:${torrentId}`)\n  } else if (Buffer.isBuffer(torrentId) && torrentId.length === 20) {\n    // if info hash (buffer)\n    return magnet(`magnet:?xt=urn:btih:${torrentId.toString('hex')}`)\n  } else if (Buffer.isBuffer(torrentId)) {\n    // if .torrent file (buffer)\n    return decodeTorrentFile(torrentId) // might throw\n  } else if (torrentId && torrentId.infoHash) {\n    // if parsed torrent (from `parse-torrent` or `magnet-uri`)\n    torrentId.infoHash = torrentId.infoHash.toLowerCase()\n\n    if (!torrentId.announce) torrentId.announce = []\n\n    if (typeof torrentId.announce === 'string') {\n      torrentId.announce = [torrentId.announce]\n    }\n\n    if (!torrentId.urlList) torrentId.urlList = []\n\n    return torrentId\n  } else {\n    throw new Error('Invalid torrent identifier')\n  }\n}\n\nfunction parseTorrentRemote (torrentId, cb) {\n  let parsedTorrent\n  if (typeof cb !== 'function') throw new Error('second argument must be a Function')\n\n  try {\n    parsedTorrent = parseTorrent(torrentId)\n  } catch (err) {\n    // If torrent fails to parse, it could be a Blob, http/https URL or\n    // filesystem path, so don't consider it an error yet.\n  }\n\n  if (parsedTorrent && parsedTorrent.infoHash) {\n    process.nextTick(() => {\n      cb(null, parsedTorrent)\n    })\n  } else if (isBlob(torrentId)) {\n    blobToBuffer(torrentId, (err, torrentBuf) => {\n      if (err) return cb(new Error(`Error converting Blob: ${err.message}`))\n      parseOrThrow(torrentBuf)\n    })\n  } else if (typeof get === 'function' && /^https?:/.test(torrentId)) {\n    // http, or https url to torrent file\n    get.concat({\n      url: torrentId,\n      timeout: 30 * 1000,\n      headers: { 'user-agent': 'WebTorrent (https://webtorrent.io)' }\n    }, (err, res, torrentBuf) => {\n      if (err) return cb(new Error(`Error downloading torrent: ${err.message}`))\n      parseOrThrow(torrentBuf)\n    })\n  } else if (typeof fs.readFile === 'function' && typeof torrentId === 'string') {\n    // assume it's a filesystem path\n    fs.readFile(torrentId, (err, torrentBuf) => {\n      if (err) return cb(new Error('Invalid torrent identifier'))\n      parseOrThrow(torrentBuf)\n    })\n  } else {\n    process.nextTick(() => {\n      cb(new Error('Invalid torrent identifier'))\n    })\n  }\n\n  function parseOrThrow (torrentBuf) {\n    try {\n      parsedTorrent = parseTorrent(torrentBuf)\n    } catch (err) {\n      return cb(err)\n    }\n    if (parsedTorrent && parsedTorrent.infoHash) cb(null, parsedTorrent)\n    else cb(new Error('Invalid torrent identifier'))\n  }\n}\n\n/**\n * Parse a torrent. Throws an exception if the torrent is missing required fields.\n * @param  {Buffer|Object} torrent\n * @return {Object}        parsed torrent\n */\nfunction decodeTorrentFile (torrent) {\n  if (Buffer.isBuffer(torrent)) {\n    torrent = bencode.decode(torrent)\n  }\n\n  // sanity check\n  ensure(torrent.info, 'info')\n  ensure(torrent.info['name.utf-8'] || torrent.info.name, 'info.name')\n  ensure(torrent.info['piece length'], 'info[\\'piece length\\']')\n  ensure(torrent.info.pieces, 'info.pieces')\n\n  if (torrent.info.files) {\n    torrent.info.files.forEach(file => {\n      ensure(typeof file.length === 'number', 'info.files[0].length')\n      ensure(file['path.utf-8'] || file.path, 'info.files[0].path')\n    })\n  } else {\n    ensure(typeof torrent.info.length === 'number', 'info.length')\n  }\n\n  const result = {\n    info: torrent.info,\n    infoBuffer: bencode.encode(torrent.info),\n    name: (torrent.info['name.utf-8'] || torrent.info.name).toString(),\n    announce: []\n  }\n\n  result.infoHash = sha1.sync(result.infoBuffer)\n  result.infoHashBuffer = Buffer.from(result.infoHash, 'hex')\n\n  if (torrent.info.private !== undefined) result.private = !!torrent.info.private\n\n  if (torrent['creation date']) result.created = new Date(torrent['creation date'] * 1000)\n  if (torrent['created by']) result.createdBy = torrent['created by'].toString()\n\n  if (Buffer.isBuffer(torrent.comment)) result.comment = torrent.comment.toString()\n\n  // announce and announce-list will be missing if metadata fetched via ut_metadata\n  if (Array.isArray(torrent['announce-list']) && torrent['announce-list'].length > 0) {\n    torrent['announce-list'].forEach(urls => {\n      urls.forEach(url => {\n        result.announce.push(url.toString())\n      })\n    })\n  } else if (torrent.announce) {\n    result.announce.push(torrent.announce.toString())\n  }\n\n  // handle url-list (BEP19 / web seeding)\n  if (Buffer.isBuffer(torrent['url-list'])) {\n    // some clients set url-list to empty string\n    torrent['url-list'] = torrent['url-list'].length > 0\n      ? [torrent['url-list']]\n      : []\n  }\n  result.urlList = (torrent['url-list'] || []).map(url => url.toString())\n\n  // remove duplicates by converting to Set and back\n  result.announce = Array.from(new Set(result.announce))\n  result.urlList = Array.from(new Set(result.urlList))\n\n  const files = torrent.info.files || [torrent.info]\n  result.files = files.map((file, i) => {\n    const parts = [].concat(result.name, file['path.utf-8'] || file.path || []).map(p => p.toString())\n    return {\n      path: path.join.apply(null, [path.sep].concat(parts)).slice(1),\n      name: parts[parts.length - 1],\n      length: file.length,\n      offset: files.slice(0, i).reduce(sumLength, 0)\n    }\n  })\n\n  result.length = files.reduce(sumLength, 0)\n\n  const lastFile = result.files[result.files.length - 1]\n\n  result.pieceLength = torrent.info['piece length']\n  result.lastPieceLength = ((lastFile.offset + lastFile.length) % result.pieceLength) || result.pieceLength\n  result.pieces = splitPieces(torrent.info.pieces)\n\n  return result\n}\n\n/**\n * Convert a parsed torrent object back into a .torrent file buffer.\n * @param  {Object} parsed parsed torrent\n * @return {Buffer}\n */\nfunction encodeTorrentFile (parsed) {\n  const torrent = {\n    info: parsed.info\n  }\n\n  torrent['announce-list'] = (parsed.announce || []).map(url => {\n    if (!torrent.announce) torrent.announce = url\n    url = Buffer.from(url, 'utf8')\n    return [url]\n  })\n\n  torrent['url-list'] = parsed.urlList || []\n\n  if (parsed.private !== undefined) {\n    torrent.private = Number(parsed.private)\n  }\n\n  if (parsed.created) {\n    torrent['creation date'] = (parsed.created.getTime() / 1000) | 0\n  }\n\n  if (parsed.createdBy) {\n    torrent['created by'] = parsed.createdBy\n  }\n\n  if (parsed.comment) {\n    torrent.comment = parsed.comment\n  }\n\n  return bencode.encode(torrent)\n}\n\n/**\n * Check if `obj` is a W3C `Blob` or `File` object\n * @param  {*} obj\n * @return {boolean}\n */\nfunction isBlob (obj) {\n  return typeof Blob !== 'undefined' && obj instanceof Blob\n}\n\nfunction sumLength (sum, file) {\n  return sum + file.length\n}\n\nfunction splitPieces (buf) {\n  const pieces = []\n  for (let i = 0; i < buf.length; i += 20) {\n    pieces.push(buf.slice(i, i + 20).toString('hex'))\n  }\n  return pieces\n}\n\nfunction ensure (bool, fieldName) {\n  if (!bool) throw new Error(`Torrent is missing required field: ${fieldName}`)\n}\n\n// Workaround Browserify v13 bug\n// https://github.com/substack/node-browserify/issues/1483\n;(() => { Buffer.alloc(0) })()\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/parse-torrent/index.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":103,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":104,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":105,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":106,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":107,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":108,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":109,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":110,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":111,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":112,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":113,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":114,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":115,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":116,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":117,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":118,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":119,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":120,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":121,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":122,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":123,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":124,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":125,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":126,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":127,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":128,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":129,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":130,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":131,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":132,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":133,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":134,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":135,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":136,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":137,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":138,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":139,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":140,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":141,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":142,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":143,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":144,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":145,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":146,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":147,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":148,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":149,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":150,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":151,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":152,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":153,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":154,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":155,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":156,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":157,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":158,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":159,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":160,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":161,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":162,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":163,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":164,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":165,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":166,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":167,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":168,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":169,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":170,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":171,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":172,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":173,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":174,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":175,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":176,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":177,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":178,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":179,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":180,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":181,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":182,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":183,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":184,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":185,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":186,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":187,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":188,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":189,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":190,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":191,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":192,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":193,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":194,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":195,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":196,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":197,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":198,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":199,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":200,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":201,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":202,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":203,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":204,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":205,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":206,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":207,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":208,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":209,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":210,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":211,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":212,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":213,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":214,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":215,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":216,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":217,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":218,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":219,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":220,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":221,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":222,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":223,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":224,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":225,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":226,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":227,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":228,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":229,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":230,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":231,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":232,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":233,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":234,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":235,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":236,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":237,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":238,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":239,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":240,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":241,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":242,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":243,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":244,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":245,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":246,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":247,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":248,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":249,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":250,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":251,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":252,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":253,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":254,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":255,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":256,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":257,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":258,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":259,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":260,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":261,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":262,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":263,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":264,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":265,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":266,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/parse-torrent/index.js","original":{"line":267,"column":0},"generated":{"line":269,"column":0}}],"sources":{"node_modules/parse-torrent/index.js":"/*! parse-torrent. MIT License. WebTorrent LLC <https://webtorrent.io/opensource> */\n/* global Blob */\n\nconst bencode = require('bencode')\nconst blobToBuffer = require('blob-to-buffer')\nconst fs = require('fs') // browser exclude\nconst get = require('simple-get')\nconst magnet = require('magnet-uri')\nconst path = require('path')\nconst sha1 = require('simple-sha1')\n\nmodule.exports = parseTorrent\nmodule.exports.remote = parseTorrentRemote\n\nmodule.exports.toMagnetURI = magnet.encode\nmodule.exports.toTorrentFile = encodeTorrentFile\n\n/**\n * Parse a torrent identifier (magnet uri, .torrent file, info hash)\n * @param  {string|Buffer|Object} torrentId\n * @return {Object}\n */\nfunction parseTorrent (torrentId) {\n  if (typeof torrentId === 'string' && /^(stream-)?magnet:/.test(torrentId)) {\n    // if magnet uri (string)\n    const torrentObj = magnet(torrentId)\n\n    // infoHash won't be defined if a non-bittorrent magnet is passed\n    if (!torrentObj.infoHash) {\n      throw new Error('Invalid torrent identifier')\n    }\n\n    return torrentObj\n  } else if (typeof torrentId === 'string' && (/^[a-f0-9]{40}$/i.test(torrentId) || /^[a-z2-7]{32}$/i.test(torrentId))) {\n    // if info hash (hex/base-32 string)\n    return magnet(`magnet:?xt=urn:btih:${torrentId}`)\n  } else if (Buffer.isBuffer(torrentId) && torrentId.length === 20) {\n    // if info hash (buffer)\n    return magnet(`magnet:?xt=urn:btih:${torrentId.toString('hex')}`)\n  } else if (Buffer.isBuffer(torrentId)) {\n    // if .torrent file (buffer)\n    return decodeTorrentFile(torrentId) // might throw\n  } else if (torrentId && torrentId.infoHash) {\n    // if parsed torrent (from `parse-torrent` or `magnet-uri`)\n    torrentId.infoHash = torrentId.infoHash.toLowerCase()\n\n    if (!torrentId.announce) torrentId.announce = []\n\n    if (typeof torrentId.announce === 'string') {\n      torrentId.announce = [torrentId.announce]\n    }\n\n    if (!torrentId.urlList) torrentId.urlList = []\n\n    return torrentId\n  } else {\n    throw new Error('Invalid torrent identifier')\n  }\n}\n\nfunction parseTorrentRemote (torrentId, cb) {\n  let parsedTorrent\n  if (typeof cb !== 'function') throw new Error('second argument must be a Function')\n\n  try {\n    parsedTorrent = parseTorrent(torrentId)\n  } catch (err) {\n    // If torrent fails to parse, it could be a Blob, http/https URL or\n    // filesystem path, so don't consider it an error yet.\n  }\n\n  if (parsedTorrent && parsedTorrent.infoHash) {\n    process.nextTick(() => {\n      cb(null, parsedTorrent)\n    })\n  } else if (isBlob(torrentId)) {\n    blobToBuffer(torrentId, (err, torrentBuf) => {\n      if (err) return cb(new Error(`Error converting Blob: ${err.message}`))\n      parseOrThrow(torrentBuf)\n    })\n  } else if (typeof get === 'function' && /^https?:/.test(torrentId)) {\n    // http, or https url to torrent file\n    get.concat({\n      url: torrentId,\n      timeout: 30 * 1000,\n      headers: { 'user-agent': 'WebTorrent (https://webtorrent.io)' }\n    }, (err, res, torrentBuf) => {\n      if (err) return cb(new Error(`Error downloading torrent: ${err.message}`))\n      parseOrThrow(torrentBuf)\n    })\n  } else if (typeof fs.readFile === 'function' && typeof torrentId === 'string') {\n    // assume it's a filesystem path\n    fs.readFile(torrentId, (err, torrentBuf) => {\n      if (err) return cb(new Error('Invalid torrent identifier'))\n      parseOrThrow(torrentBuf)\n    })\n  } else {\n    process.nextTick(() => {\n      cb(new Error('Invalid torrent identifier'))\n    })\n  }\n\n  function parseOrThrow (torrentBuf) {\n    try {\n      parsedTorrent = parseTorrent(torrentBuf)\n    } catch (err) {\n      return cb(err)\n    }\n    if (parsedTorrent && parsedTorrent.infoHash) cb(null, parsedTorrent)\n    else cb(new Error('Invalid torrent identifier'))\n  }\n}\n\n/**\n * Parse a torrent. Throws an exception if the torrent is missing required fields.\n * @param  {Buffer|Object} torrent\n * @return {Object}        parsed torrent\n */\nfunction decodeTorrentFile (torrent) {\n  if (Buffer.isBuffer(torrent)) {\n    torrent = bencode.decode(torrent)\n  }\n\n  // sanity check\n  ensure(torrent.info, 'info')\n  ensure(torrent.info['name.utf-8'] || torrent.info.name, 'info.name')\n  ensure(torrent.info['piece length'], 'info[\\'piece length\\']')\n  ensure(torrent.info.pieces, 'info.pieces')\n\n  if (torrent.info.files) {\n    torrent.info.files.forEach(file => {\n      ensure(typeof file.length === 'number', 'info.files[0].length')\n      ensure(file['path.utf-8'] || file.path, 'info.files[0].path')\n    })\n  } else {\n    ensure(typeof torrent.info.length === 'number', 'info.length')\n  }\n\n  const result = {\n    info: torrent.info,\n    infoBuffer: bencode.encode(torrent.info),\n    name: (torrent.info['name.utf-8'] || torrent.info.name).toString(),\n    announce: []\n  }\n\n  result.infoHash = sha1.sync(result.infoBuffer)\n  result.infoHashBuffer = Buffer.from(result.infoHash, 'hex')\n\n  if (torrent.info.private !== undefined) result.private = !!torrent.info.private\n\n  if (torrent['creation date']) result.created = new Date(torrent['creation date'] * 1000)\n  if (torrent['created by']) result.createdBy = torrent['created by'].toString()\n\n  if (Buffer.isBuffer(torrent.comment)) result.comment = torrent.comment.toString()\n\n  // announce and announce-list will be missing if metadata fetched via ut_metadata\n  if (Array.isArray(torrent['announce-list']) && torrent['announce-list'].length > 0) {\n    torrent['announce-list'].forEach(urls => {\n      urls.forEach(url => {\n        result.announce.push(url.toString())\n      })\n    })\n  } else if (torrent.announce) {\n    result.announce.push(torrent.announce.toString())\n  }\n\n  // handle url-list (BEP19 / web seeding)\n  if (Buffer.isBuffer(torrent['url-list'])) {\n    // some clients set url-list to empty string\n    torrent['url-list'] = torrent['url-list'].length > 0\n      ? [torrent['url-list']]\n      : []\n  }\n  result.urlList = (torrent['url-list'] || []).map(url => url.toString())\n\n  // remove duplicates by converting to Set and back\n  result.announce = Array.from(new Set(result.announce))\n  result.urlList = Array.from(new Set(result.urlList))\n\n  const files = torrent.info.files || [torrent.info]\n  result.files = files.map((file, i) => {\n    const parts = [].concat(result.name, file['path.utf-8'] || file.path || []).map(p => p.toString())\n    return {\n      path: path.join.apply(null, [path.sep].concat(parts)).slice(1),\n      name: parts[parts.length - 1],\n      length: file.length,\n      offset: files.slice(0, i).reduce(sumLength, 0)\n    }\n  })\n\n  result.length = files.reduce(sumLength, 0)\n\n  const lastFile = result.files[result.files.length - 1]\n\n  result.pieceLength = torrent.info['piece length']\n  result.lastPieceLength = ((lastFile.offset + lastFile.length) % result.pieceLength) || result.pieceLength\n  result.pieces = splitPieces(torrent.info.pieces)\n\n  return result\n}\n\n/**\n * Convert a parsed torrent object back into a .torrent file buffer.\n * @param  {Object} parsed parsed torrent\n * @return {Buffer}\n */\nfunction encodeTorrentFile (parsed) {\n  const torrent = {\n    info: parsed.info\n  }\n\n  torrent['announce-list'] = (parsed.announce || []).map(url => {\n    if (!torrent.announce) torrent.announce = url\n    url = Buffer.from(url, 'utf8')\n    return [url]\n  })\n\n  torrent['url-list'] = parsed.urlList || []\n\n  if (parsed.private !== undefined) {\n    torrent.private = Number(parsed.private)\n  }\n\n  if (parsed.created) {\n    torrent['creation date'] = (parsed.created.getTime() / 1000) | 0\n  }\n\n  if (parsed.createdBy) {\n    torrent['created by'] = parsed.createdBy\n  }\n\n  if (parsed.comment) {\n    torrent.comment = parsed.comment\n  }\n\n  return bencode.encode(torrent)\n}\n\n/**\n * Check if `obj` is a W3C `Blob` or `File` object\n * @param  {*} obj\n * @return {boolean}\n */\nfunction isBlob (obj) {\n  return typeof Blob !== 'undefined' && obj instanceof Blob\n}\n\nfunction sumLength (sum, file) {\n  return sum + file.length\n}\n\nfunction splitPieces (buf) {\n  const pieces = []\n  for (let i = 0; i < buf.length; i += 20) {\n    pieces.push(buf.slice(i, i + 20).toString('hex'))\n  }\n  return pieces\n}\n\nfunction ensure (bool, fieldName) {\n  if (!bool) throw new Error(`Torrent is missing required field: ${fieldName}`)\n}\n\n// Workaround Browserify v13 bug\n// https://github.com/substack/node-browserify/issues/1483\n;(() => { Buffer.alloc(0) })()\n"},"lineCount":269}},"error":null,"hash":"3615e355d84464707c7c30b3801359f3","cacheData":{"env":{}}}