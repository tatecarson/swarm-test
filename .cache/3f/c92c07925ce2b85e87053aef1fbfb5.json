{"id":"node_modules/binary-search/index.js","dependencies":[{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\package.json","includedInParent":true,"mtime":1596059326965},{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\binary-search\\package.json","includedInParent":true,"mtime":1596059321232}],"generated":{"js":"module.exports = function(haystack, needle, comparator, low, high) {\n  var mid, cmp;\n\n  if(low === undefined)\n    low = 0;\n\n  else {\n    low = low|0;\n    if(low < 0 || low >= haystack.length)\n      throw new RangeError(\"invalid lower bound\");\n  }\n\n  if(high === undefined)\n    high = haystack.length - 1;\n\n  else {\n    high = high|0;\n    if(high < low || high >= haystack.length)\n      throw new RangeError(\"invalid upper bound\");\n  }\n\n  while(low <= high) {\n    // The naive `low + high >>> 1` could fail for array lengths > 2**31\n    // because `>>>` converts its operands to int32. `low + (high - low >>> 1)`\n    // works for array lengths <= 2**32-1 which is also Javascript's max array\n    // length.\n    mid = low + ((high - low) >>> 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack);\n\n    // Too low.\n    if(cmp < 0.0)\n      low  = mid + 1;\n\n    // Too high.\n    else if(cmp > 0.0)\n      high = mid - 1;\n\n    // Key found.\n    else\n      return mid;\n  }\n\n  // Key not found.\n  return ~low;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/binary-search/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/binary-search/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}}],"sources":{"node_modules/binary-search/index.js":"module.exports = function(haystack, needle, comparator, low, high) {\n  var mid, cmp;\n\n  if(low === undefined)\n    low = 0;\n\n  else {\n    low = low|0;\n    if(low < 0 || low >= haystack.length)\n      throw new RangeError(\"invalid lower bound\");\n  }\n\n  if(high === undefined)\n    high = haystack.length - 1;\n\n  else {\n    high = high|0;\n    if(high < low || high >= haystack.length)\n      throw new RangeError(\"invalid upper bound\");\n  }\n\n  while(low <= high) {\n    // The naive `low + high >>> 1` could fail for array lengths > 2**31\n    // because `>>>` converts its operands to int32. `low + (high - low >>> 1)`\n    // works for array lengths <= 2**32-1 which is also Javascript's max array\n    // length.\n    mid = low + ((high - low) >>> 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack);\n\n    // Too low.\n    if(cmp < 0.0)\n      low  = mid + 1;\n\n    // Too high.\n    else if(cmp > 0.0)\n      high = mid - 1;\n\n    // Key found.\n    else\n      return mid;\n  }\n\n  // Key not found.\n  return ~low;\n}\n"},"lineCount":46}},"error":null,"hash":"11098cbc74e61b9fbf2a1a0041def7b3","cacheData":{"env":{}}}