{"id":"node_modules/parse-numeric-range/index.js","dependencies":[{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\package.json","includedInParent":true,"mtime":1596059326965},{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\parse-numeric-range\\package.json","includedInParent":true,"mtime":1596059322590}],"generated":{"js":"/**\n * @param {string} string    The string to parse\n * @returns {Array<number>}  Returns an energetic array.\n */\nfunction parsePart(string) {\n  let res = [];\n  let m;\n\n  for (let str of string.split(\",\").map((str) => str.trim())) {\n    // just a number\n    if (/^-?\\d+$/.test(str)) {\n      res.push(parseInt(str, 10));\n    } else if (\n      (m = str.match(/^(-?\\d+)(-|\\.\\.\\.?|\\u2025|\\u2026|\\u22EF)(-?\\d+)$/))\n    ) {\n      // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)\n      let [_, lhs, sep, rhs] = m;\n\n      if (lhs && rhs) {\n        lhs = parseInt(lhs);\n        rhs = parseInt(rhs);\n        const incr = lhs < rhs ? 1 : -1;\n\n        // Make it inclusive by moving the right 'stop-point' away by one.\n        if (sep === \"-\" || sep === \"..\" || sep === \"\\u2025\") rhs += incr;\n\n        for (let i = lhs; i !== rhs; i += incr) res.push(i);\n      }\n    }\n  }\n\n  return res;\n}\n\nexports.default = parsePart;\nmodule.exports = parsePart;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/parse-numeric-range/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/parse-numeric-range/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}}],"sources":{"node_modules/parse-numeric-range/index.js":"/**\n * @param {string} string    The string to parse\n * @returns {Array<number>}  Returns an energetic array.\n */\nfunction parsePart(string) {\n  let res = [];\n  let m;\n\n  for (let str of string.split(\",\").map((str) => str.trim())) {\n    // just a number\n    if (/^-?\\d+$/.test(str)) {\n      res.push(parseInt(str, 10));\n    } else if (\n      (m = str.match(/^(-?\\d+)(-|\\.\\.\\.?|\\u2025|\\u2026|\\u22EF)(-?\\d+)$/))\n    ) {\n      // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)\n      let [_, lhs, sep, rhs] = m;\n\n      if (lhs && rhs) {\n        lhs = parseInt(lhs);\n        rhs = parseInt(rhs);\n        const incr = lhs < rhs ? 1 : -1;\n\n        // Make it inclusive by moving the right 'stop-point' away by one.\n        if (sep === \"-\" || sep === \"..\" || sep === \"\\u2025\") rhs += incr;\n\n        for (let i = lhs; i !== rhs; i += incr) res.push(i);\n      }\n    }\n  }\n\n  return res;\n}\n\nexports.default = parsePart;\nmodule.exports = parsePart;\n"},"lineCount":37}},"error":null,"hash":"e9152f4454a37ec133ae9806bd32e1f1","cacheData":{"env":{}}}