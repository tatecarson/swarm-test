{"id":"node_modules/ut_metadata/index.js","dependencies":[{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\package.json","includedInParent":true,"mtime":1596059326965},{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\ut_metadata\\package.json","includedInParent":true,"mtime":1596059322585},{"name":"events","loc":{"line":2,"column":33},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\ut_metadata\\index.js","resolved":"C:\\Users\\Tate\\AppData\\Roaming\\npm\\node_modules\\parcel\\node_modules\\events\\events.js"},{"name":"bencode","loc":{"line":3,"column":24},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\ut_metadata\\index.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\bencode\\lib\\index.js"},{"name":"bitfield","loc":{"line":4,"column":25},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\ut_metadata\\index.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\bitfield\\index.js"},{"name":"debug","loc":{"line":5,"column":22},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\ut_metadata\\index.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\debug\\src\\browser.js"},{"name":"simple-sha1","loc":{"line":6,"column":21},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\ut_metadata\\index.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\simple-sha1\\browser.js"},{"name":"buffer","parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\ut_metadata\\index.js","resolved":"C:\\Users\\Tate\\AppData\\Roaming\\npm\\node_modules\\parcel\\node_modules\\buffer\\index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n/*! ut_metadata. MIT License. WebTorrent LLC <https://webtorrent.io/opensource> */\nconst { EventEmitter } = require('events')\nconst bencode = require('bencode')\nconst BitField = require('bitfield')\nconst debug = require('debug')('ut_metadata')\nconst sha1 = require('simple-sha1')\n\nconst MAX_METADATA_SIZE = 1E7 // 10 MB\nconst BITFIELD_GROW = 1E3\nconst PIECE_LENGTH = 1 << 14 // 16 KiB\n\nmodule.exports = metadata => {\n  class utMetadata extends EventEmitter {\n    constructor (wire) {\n      super()\n\n      this._wire = wire\n\n      this._fetching = false\n      this._metadataComplete = false\n      this._metadataSize = null\n      // how many reject messages to tolerate before quitting\n      this._remainingRejects = null\n\n      // The largest torrent file that I know of is ~1-2MB, which is ~100\n      // pieces. Therefore, cap the bitfield to 10x that (1000 pieces) so a\n      // malicious peer can't make it grow to fill all memory.\n      this._bitfield = new BitField(0, { grow: BITFIELD_GROW })\n\n      if (Buffer.isBuffer(metadata)) {\n        this.setMetadata(metadata)\n      }\n    }\n\n    onHandshake (infoHash, peerId, extensions) {\n      this._infoHash = infoHash\n    }\n\n    onExtendedHandshake (handshake) {\n      if (!handshake.m || !handshake.m.ut_metadata) {\n        return this.emit('warning', new Error('Peer does not support ut_metadata'))\n      }\n      if (!handshake.metadata_size) {\n        return this.emit('warning', new Error('Peer does not have metadata'))\n      }\n      if (typeof handshake.metadata_size !== 'number' ||\n          MAX_METADATA_SIZE < handshake.metadata_size ||\n          handshake.metadata_size <= 0) {\n        return this.emit('warning', new Error('Peer gave invalid metadata size'))\n      }\n\n      this._metadataSize = handshake.metadata_size\n      this._numPieces = Math.ceil(this._metadataSize / PIECE_LENGTH)\n      this._remainingRejects = this._numPieces * 2\n\n      this._requestPieces()\n    }\n\n    onMessage (buf) {\n      let dict\n      let trailer\n      try {\n        const str = buf.toString()\n        const trailerIndex = str.indexOf('ee') + 2\n        dict = bencode.decode(str.substring(0, trailerIndex))\n        trailer = buf.slice(trailerIndex)\n      } catch (err) {\n        // drop invalid messages\n        return\n      }\n\n      switch (dict.msg_type) {\n        case 0:\n          // ut_metadata request (from peer)\n          // example: { 'msg_type': 0, 'piece': 0 }\n          this._onRequest(dict.piece)\n          break\n        case 1:\n          // ut_metadata data (in response to our request)\n          // example: { 'msg_type': 1, 'piece': 0, 'total_size': 3425 }\n          this._onData(dict.piece, trailer, dict.total_size)\n          break\n        case 2:\n          // ut_metadata reject (peer doesn't have piece we requested)\n          // { 'msg_type': 2, 'piece': 0 }\n          this._onReject(dict.piece)\n          break\n      }\n    }\n\n    /**\n     * Ask the peer to send metadata.\n     * @public\n     */\n    fetch () {\n      if (this._metadataComplete) {\n        return\n      }\n      this._fetching = true\n      if (this._metadataSize) {\n        this._requestPieces()\n      }\n    }\n\n    /**\n     * Stop asking the peer to send metadata.\n     * @public\n     */\n    cancel () {\n      this._fetching = false\n    }\n\n    setMetadata (metadata) {\n      if (this._metadataComplete) return true\n      debug('set metadata')\n\n      // if full torrent dictionary was passed in, pull out just `info` key\n      try {\n        const info = bencode.decode(metadata).info\n        if (info) {\n          metadata = bencode.encode(info)\n        }\n      } catch (err) {}\n\n      // check hash\n      if (this._infoHash && this._infoHash !== sha1.sync(metadata)) {\n        return false\n      }\n\n      this.cancel()\n\n      this.metadata = metadata\n      this._metadataComplete = true\n      this._metadataSize = this.metadata.length\n      this._wire.extendedHandshake.metadata_size = this._metadataSize\n\n      this.emit('metadata', bencode.encode({\n        info: bencode.decode(this.metadata)\n      }))\n\n      return true\n    }\n\n    _send (dict, trailer) {\n      let buf = bencode.encode(dict)\n      if (Buffer.isBuffer(trailer)) {\n        buf = Buffer.concat([buf, trailer])\n      }\n      this._wire.extended('ut_metadata', buf)\n    }\n\n    _request (piece) {\n      this._send({ msg_type: 0, piece })\n    }\n\n    _data (piece, buf, totalSize) {\n      const msg = { msg_type: 1, piece }\n      if (typeof totalSize === 'number') {\n        msg.total_size = totalSize\n      }\n      this._send(msg, buf)\n    }\n\n    _reject (piece) {\n      this._send({ msg_type: 2, piece })\n    }\n\n    _onRequest (piece) {\n      if (!this._metadataComplete) {\n        this._reject(piece)\n        return\n      }\n      const start = piece * PIECE_LENGTH\n      let end = start + PIECE_LENGTH\n      if (end > this._metadataSize) {\n        end = this._metadataSize\n      }\n      const buf = this.metadata.slice(start, end)\n      this._data(piece, buf, this._metadataSize)\n    }\n\n    _onData (piece, buf, totalSize) {\n      if (buf.length > PIECE_LENGTH || !this._fetching) {\n        return\n      }\n      buf.copy(this.metadata, piece * PIECE_LENGTH)\n      this._bitfield.set(piece)\n      this._checkDone()\n    }\n\n    _onReject (piece) {\n      if (this._remainingRejects > 0 && this._fetching) {\n        // If we haven't been rejected too much,\n        // then try to request the piece again\n        this._request(piece)\n        this._remainingRejects -= 1\n      } else {\n        this.emit('warning', new Error('Peer sent \"reject\" too much'))\n      }\n    }\n\n    _requestPieces () {\n      if (!this._fetching) return\n      this.metadata = Buffer.alloc(this._metadataSize)\n      for (let piece = 0; piece < this._numPieces; piece++) {\n        this._request(piece)\n      }\n    }\n\n    _checkDone () {\n      let done = true\n      for (let piece = 0; piece < this._numPieces; piece++) {\n        if (!this._bitfield.get(piece)) {\n          done = false\n          break\n        }\n      }\n      if (!done) return\n\n      // attempt to set metadata -- may fail sha1 check\n      const success = this.setMetadata(this.metadata)\n\n      if (!success) {\n        this._failedMetadata()\n      }\n    }\n\n    _failedMetadata () {\n      // reset bitfield & try again\n      this._bitfield = new BitField(0, { grow: BITFIELD_GROW })\n      this._remainingRejects -= this._numPieces\n      if (this._remainingRejects > 0) {\n        this._requestPieces()\n      } else {\n        this.emit('warning', new Error('Peer sent invalid metadata'))\n      }\n    }\n  }\n\n  // Name of the bittorrent-protocol extension\n  utMetadata.prototype.name = 'ut_metadata'\n\n  return utMetadata\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ut_metadata/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/ut_metadata/index.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}}],"sources":{"node_modules/ut_metadata/index.js":"/*! ut_metadata. MIT License. WebTorrent LLC <https://webtorrent.io/opensource> */\nconst { EventEmitter } = require('events')\nconst bencode = require('bencode')\nconst BitField = require('bitfield')\nconst debug = require('debug')('ut_metadata')\nconst sha1 = require('simple-sha1')\n\nconst MAX_METADATA_SIZE = 1E7 // 10 MB\nconst BITFIELD_GROW = 1E3\nconst PIECE_LENGTH = 1 << 14 // 16 KiB\n\nmodule.exports = metadata => {\n  class utMetadata extends EventEmitter {\n    constructor (wire) {\n      super()\n\n      this._wire = wire\n\n      this._fetching = false\n      this._metadataComplete = false\n      this._metadataSize = null\n      // how many reject messages to tolerate before quitting\n      this._remainingRejects = null\n\n      // The largest torrent file that I know of is ~1-2MB, which is ~100\n      // pieces. Therefore, cap the bitfield to 10x that (1000 pieces) so a\n      // malicious peer can't make it grow to fill all memory.\n      this._bitfield = new BitField(0, { grow: BITFIELD_GROW })\n\n      if (Buffer.isBuffer(metadata)) {\n        this.setMetadata(metadata)\n      }\n    }\n\n    onHandshake (infoHash, peerId, extensions) {\n      this._infoHash = infoHash\n    }\n\n    onExtendedHandshake (handshake) {\n      if (!handshake.m || !handshake.m.ut_metadata) {\n        return this.emit('warning', new Error('Peer does not support ut_metadata'))\n      }\n      if (!handshake.metadata_size) {\n        return this.emit('warning', new Error('Peer does not have metadata'))\n      }\n      if (typeof handshake.metadata_size !== 'number' ||\n          MAX_METADATA_SIZE < handshake.metadata_size ||\n          handshake.metadata_size <= 0) {\n        return this.emit('warning', new Error('Peer gave invalid metadata size'))\n      }\n\n      this._metadataSize = handshake.metadata_size\n      this._numPieces = Math.ceil(this._metadataSize / PIECE_LENGTH)\n      this._remainingRejects = this._numPieces * 2\n\n      this._requestPieces()\n    }\n\n    onMessage (buf) {\n      let dict\n      let trailer\n      try {\n        const str = buf.toString()\n        const trailerIndex = str.indexOf('ee') + 2\n        dict = bencode.decode(str.substring(0, trailerIndex))\n        trailer = buf.slice(trailerIndex)\n      } catch (err) {\n        // drop invalid messages\n        return\n      }\n\n      switch (dict.msg_type) {\n        case 0:\n          // ut_metadata request (from peer)\n          // example: { 'msg_type': 0, 'piece': 0 }\n          this._onRequest(dict.piece)\n          break\n        case 1:\n          // ut_metadata data (in response to our request)\n          // example: { 'msg_type': 1, 'piece': 0, 'total_size': 3425 }\n          this._onData(dict.piece, trailer, dict.total_size)\n          break\n        case 2:\n          // ut_metadata reject (peer doesn't have piece we requested)\n          // { 'msg_type': 2, 'piece': 0 }\n          this._onReject(dict.piece)\n          break\n      }\n    }\n\n    /**\n     * Ask the peer to send metadata.\n     * @public\n     */\n    fetch () {\n      if (this._metadataComplete) {\n        return\n      }\n      this._fetching = true\n      if (this._metadataSize) {\n        this._requestPieces()\n      }\n    }\n\n    /**\n     * Stop asking the peer to send metadata.\n     * @public\n     */\n    cancel () {\n      this._fetching = false\n    }\n\n    setMetadata (metadata) {\n      if (this._metadataComplete) return true\n      debug('set metadata')\n\n      // if full torrent dictionary was passed in, pull out just `info` key\n      try {\n        const info = bencode.decode(metadata).info\n        if (info) {\n          metadata = bencode.encode(info)\n        }\n      } catch (err) {}\n\n      // check hash\n      if (this._infoHash && this._infoHash !== sha1.sync(metadata)) {\n        return false\n      }\n\n      this.cancel()\n\n      this.metadata = metadata\n      this._metadataComplete = true\n      this._metadataSize = this.metadata.length\n      this._wire.extendedHandshake.metadata_size = this._metadataSize\n\n      this.emit('metadata', bencode.encode({\n        info: bencode.decode(this.metadata)\n      }))\n\n      return true\n    }\n\n    _send (dict, trailer) {\n      let buf = bencode.encode(dict)\n      if (Buffer.isBuffer(trailer)) {\n        buf = Buffer.concat([buf, trailer])\n      }\n      this._wire.extended('ut_metadata', buf)\n    }\n\n    _request (piece) {\n      this._send({ msg_type: 0, piece })\n    }\n\n    _data (piece, buf, totalSize) {\n      const msg = { msg_type: 1, piece }\n      if (typeof totalSize === 'number') {\n        msg.total_size = totalSize\n      }\n      this._send(msg, buf)\n    }\n\n    _reject (piece) {\n      this._send({ msg_type: 2, piece })\n    }\n\n    _onRequest (piece) {\n      if (!this._metadataComplete) {\n        this._reject(piece)\n        return\n      }\n      const start = piece * PIECE_LENGTH\n      let end = start + PIECE_LENGTH\n      if (end > this._metadataSize) {\n        end = this._metadataSize\n      }\n      const buf = this.metadata.slice(start, end)\n      this._data(piece, buf, this._metadataSize)\n    }\n\n    _onData (piece, buf, totalSize) {\n      if (buf.length > PIECE_LENGTH || !this._fetching) {\n        return\n      }\n      buf.copy(this.metadata, piece * PIECE_LENGTH)\n      this._bitfield.set(piece)\n      this._checkDone()\n    }\n\n    _onReject (piece) {\n      if (this._remainingRejects > 0 && this._fetching) {\n        // If we haven't been rejected too much,\n        // then try to request the piece again\n        this._request(piece)\n        this._remainingRejects -= 1\n      } else {\n        this.emit('warning', new Error('Peer sent \"reject\" too much'))\n      }\n    }\n\n    _requestPieces () {\n      if (!this._fetching) return\n      this.metadata = Buffer.alloc(this._metadataSize)\n      for (let piece = 0; piece < this._numPieces; piece++) {\n        this._request(piece)\n      }\n    }\n\n    _checkDone () {\n      let done = true\n      for (let piece = 0; piece < this._numPieces; piece++) {\n        if (!this._bitfield.get(piece)) {\n          done = false\n          break\n        }\n      }\n      if (!done) return\n\n      // attempt to set metadata -- may fail sha1 check\n      const success = this.setMetadata(this.metadata)\n\n      if (!success) {\n        this._failedMetadata()\n      }\n    }\n\n    _failedMetadata () {\n      // reset bitfield & try again\n      this._bitfield = new BitField(0, { grow: BITFIELD_GROW })\n      this._remainingRejects -= this._numPieces\n      if (this._remainingRejects > 0) {\n        this._requestPieces()\n      } else {\n        this.emit('warning', new Error('Peer sent invalid metadata'))\n      }\n    }\n  }\n\n  // Name of the bittorrent-protocol extension\n  utMetadata.prototype.name = 'ut_metadata'\n\n  return utMetadata\n}\n"},"lineCount":246}},"error":null,"hash":"dd8f14f443f9ab14da70fdb9cdfd6593","cacheData":{"env":{}}}