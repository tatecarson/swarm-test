{"id":"node_modules/uint64be/index.js","dependencies":[{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\package.json","includedInParent":true,"mtime":1596143871560},{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\uint64be\\package.json","includedInParent":true,"mtime":1596059322692},{"name":"buffer-alloc","loc":{"line":1,"column":26},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\uint64be\\index.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\buffer-alloc\\index.js"}],"generated":{"js":"var bufferAlloc = require('buffer-alloc')\n\nvar UINT_32_MAX = Math.pow(2, 32)\n\nexports.encodingLength = function () {\n  return 8\n}\n\nexports.encode = function (num, buf, offset) {\n  if (!buf) buf = bufferAlloc(8)\n  if (!offset) offset = 0\n\n  var top = Math.floor(num / UINT_32_MAX)\n  var rem = num - top * UINT_32_MAX\n\n  buf.writeUInt32BE(top, offset)\n  buf.writeUInt32BE(rem, offset + 4)\n  return buf\n}\n\nexports.decode = function (buf, offset) {\n  if (!offset) offset = 0\n\n  var top = buf.readUInt32BE(offset)\n  var rem = buf.readUInt32BE(offset + 4)\n\n  return top * UINT_32_MAX + rem\n}\n\nexports.encode.bytes = 8\nexports.decode.bytes = 8\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/uint64be/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/uint64be/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}}],"sources":{"node_modules/uint64be/index.js":"var bufferAlloc = require('buffer-alloc')\n\nvar UINT_32_MAX = Math.pow(2, 32)\n\nexports.encodingLength = function () {\n  return 8\n}\n\nexports.encode = function (num, buf, offset) {\n  if (!buf) buf = bufferAlloc(8)\n  if (!offset) offset = 0\n\n  var top = Math.floor(num / UINT_32_MAX)\n  var rem = num - top * UINT_32_MAX\n\n  buf.writeUInt32BE(top, offset)\n  buf.writeUInt32BE(rem, offset + 4)\n  return buf\n}\n\nexports.decode = function (buf, offset) {\n  if (!offset) offset = 0\n\n  var top = buf.readUInt32BE(offset)\n  var rem = buf.readUInt32BE(offset + 4)\n\n  return top * UINT_32_MAX + rem\n}\n\nexports.encode.bytes = 8\nexports.decode.bytes = 8\n"},"lineCount":32}},"error":null,"hash":"d4478b9ecb51fffb6c4daa5f2fca7a59","cacheData":{"env":{}}}