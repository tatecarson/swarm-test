{"id":"node_modules/magnet-uri/index.js","dependencies":[{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\package.json","includedInParent":true,"mtime":1596143871560},{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\magnet-uri\\package.json","includedInParent":true,"mtime":1596059323029},{"name":"thirty-two","loc":{"line":6,"column":23},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\magnet-uri\\index.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\thirty-two\\lib\\thirty-two\\index.js"},{"name":"buffer","parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\magnet-uri\\index.js","resolved":"C:\\Users\\Tate\\AppData\\Roaming\\npm\\node_modules\\parcel\\node_modules\\buffer\\index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n/*! magnet-uri. MIT License. WebTorrent LLC <https://webtorrent.io/opensource> */\nmodule.exports = magnetURIDecode\nmodule.exports.decode = magnetURIDecode\nmodule.exports.encode = magnetURIEncode\n\nconst base32 = require('thirty-two')\n\n/**\n * Parse a magnet URI and return an object of keys/values\n *\n * @param  {string} uri\n * @return {Object} parsed uri\n */\nfunction magnetURIDecode (uri) {\n  const result = {}\n\n  // Support 'magnet:' and 'stream-magnet:' uris\n  const data = uri.split('magnet:?')[1]\n\n  const params = (data && data.length >= 0)\n    ? data.split('&')\n    : []\n\n  params.forEach(param => {\n    const keyval = param.split('=')\n\n    // This keyval is invalid, skip it\n    if (keyval.length !== 2) return\n\n    const key = keyval[0]\n    let val = keyval[1]\n\n    // Clean up torrent name\n    if (key === 'dn') val = decodeURIComponent(val).replace(/\\+/g, ' ')\n\n    // Address tracker (tr), exact source (xs), and acceptable source (as) are encoded\n    // URIs, so decode them\n    if (key === 'tr' || key === 'xs' || key === 'as' || key === 'ws') {\n      val = decodeURIComponent(val)\n    }\n\n    // Return keywords as an array\n    if (key === 'kt') val = decodeURIComponent(val).split('+')\n\n    // Cast file index (ix) to a number\n    if (key === 'ix') val = Number(val)\n\n    // If there are repeated parameters, return an array of values\n    if (result[key]) {\n      if (!Array.isArray(result[key])) {\n        result[key] = [result[key]]\n      }\n\n      result[key].push(val)\n    } else {\n      result[key] = val\n    }\n  })\n\n  // Convenience properties for parity with `parse-torrent-file` module\n  let m\n  if (result.xt) {\n    const xts = Array.isArray(result.xt) ? result.xt : [result.xt]\n    xts.forEach(xt => {\n      if ((m = xt.match(/^urn:btih:(.{40})/))) {\n        result.infoHash = m[1].toLowerCase()\n      } else if ((m = xt.match(/^urn:btih:(.{32})/))) {\n        const decodedStr = base32.decode(m[1])\n        result.infoHash = Buffer.from(decodedStr, 'binary').toString('hex')\n      }\n    })\n  }\n  if (result.infoHash) result.infoHashBuffer = Buffer.from(result.infoHash, 'hex')\n\n  if (result.dn) result.name = result.dn\n  if (result.kt) result.keywords = result.kt\n\n  if (typeof result.tr === 'string') result.announce = [result.tr]\n  else if (Array.isArray(result.tr)) result.announce = result.tr\n  else result.announce = []\n\n  result.urlList = []\n  if (typeof result.as === 'string' || Array.isArray(result.as)) {\n    result.urlList = result.urlList.concat(result.as)\n  }\n  if (typeof result.ws === 'string' || Array.isArray(result.ws)) {\n    result.urlList = result.urlList.concat(result.ws)\n  }\n\n  // remove duplicates by converting to Set and back\n  result.announce = Array.from(new Set(result.announce))\n  result.urlList = Array.from(new Set(result.urlList))\n\n  return result\n}\n\nfunction magnetURIEncode (obj) {\n  obj = Object.assign({}, obj) // clone obj, so we can mutate it\n\n  // support using convenience names, in addition to spec names\n  // (example: `infoHash` for `xt`, `name` for `dn`)\n  if (obj.infoHashBuffer) obj.xt = `urn:btih:${obj.infoHashBuffer.toString('hex')}`\n  if (obj.infoHash) obj.xt = `urn:btih:${obj.infoHash}`\n  if (obj.name) obj.dn = obj.name\n  if (obj.keywords) obj.kt = obj.keywords\n  if (obj.announce) obj.tr = obj.announce\n  if (obj.urlList) {\n    obj.ws = obj.urlList\n    delete obj.as\n  }\n\n  let result = 'magnet:?'\n  Object.keys(obj)\n    .filter(key => key.length === 2)\n    .forEach((key, i) => {\n      const values = Array.isArray(obj[key]) ? obj[key] : [obj[key]]\n      values.forEach((val, j) => {\n        if ((i > 0 || j > 0) && (key !== 'kt' || j === 0)) result += '&'\n\n        if (key === 'dn') val = encodeURIComponent(val).replace(/%20/g, '+')\n        if (key === 'tr' || key === 'xs' || key === 'as' || key === 'ws') {\n          val = encodeURIComponent(val)\n        }\n        if (key === 'kt') val = encodeURIComponent(val)\n\n        if (key === 'kt' && j > 0) result += `+${val}`\n        else result += `${key}=${val}`\n      })\n    })\n\n  return result\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/magnet-uri/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/magnet-uri/index.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}}],"sources":{"node_modules/magnet-uri/index.js":"/*! magnet-uri. MIT License. WebTorrent LLC <https://webtorrent.io/opensource> */\nmodule.exports = magnetURIDecode\nmodule.exports.decode = magnetURIDecode\nmodule.exports.encode = magnetURIEncode\n\nconst base32 = require('thirty-two')\n\n/**\n * Parse a magnet URI and return an object of keys/values\n *\n * @param  {string} uri\n * @return {Object} parsed uri\n */\nfunction magnetURIDecode (uri) {\n  const result = {}\n\n  // Support 'magnet:' and 'stream-magnet:' uris\n  const data = uri.split('magnet:?')[1]\n\n  const params = (data && data.length >= 0)\n    ? data.split('&')\n    : []\n\n  params.forEach(param => {\n    const keyval = param.split('=')\n\n    // This keyval is invalid, skip it\n    if (keyval.length !== 2) return\n\n    const key = keyval[0]\n    let val = keyval[1]\n\n    // Clean up torrent name\n    if (key === 'dn') val = decodeURIComponent(val).replace(/\\+/g, ' ')\n\n    // Address tracker (tr), exact source (xs), and acceptable source (as) are encoded\n    // URIs, so decode them\n    if (key === 'tr' || key === 'xs' || key === 'as' || key === 'ws') {\n      val = decodeURIComponent(val)\n    }\n\n    // Return keywords as an array\n    if (key === 'kt') val = decodeURIComponent(val).split('+')\n\n    // Cast file index (ix) to a number\n    if (key === 'ix') val = Number(val)\n\n    // If there are repeated parameters, return an array of values\n    if (result[key]) {\n      if (!Array.isArray(result[key])) {\n        result[key] = [result[key]]\n      }\n\n      result[key].push(val)\n    } else {\n      result[key] = val\n    }\n  })\n\n  // Convenience properties for parity with `parse-torrent-file` module\n  let m\n  if (result.xt) {\n    const xts = Array.isArray(result.xt) ? result.xt : [result.xt]\n    xts.forEach(xt => {\n      if ((m = xt.match(/^urn:btih:(.{40})/))) {\n        result.infoHash = m[1].toLowerCase()\n      } else if ((m = xt.match(/^urn:btih:(.{32})/))) {\n        const decodedStr = base32.decode(m[1])\n        result.infoHash = Buffer.from(decodedStr, 'binary').toString('hex')\n      }\n    })\n  }\n  if (result.infoHash) result.infoHashBuffer = Buffer.from(result.infoHash, 'hex')\n\n  if (result.dn) result.name = result.dn\n  if (result.kt) result.keywords = result.kt\n\n  if (typeof result.tr === 'string') result.announce = [result.tr]\n  else if (Array.isArray(result.tr)) result.announce = result.tr\n  else result.announce = []\n\n  result.urlList = []\n  if (typeof result.as === 'string' || Array.isArray(result.as)) {\n    result.urlList = result.urlList.concat(result.as)\n  }\n  if (typeof result.ws === 'string' || Array.isArray(result.ws)) {\n    result.urlList = result.urlList.concat(result.ws)\n  }\n\n  // remove duplicates by converting to Set and back\n  result.announce = Array.from(new Set(result.announce))\n  result.urlList = Array.from(new Set(result.urlList))\n\n  return result\n}\n\nfunction magnetURIEncode (obj) {\n  obj = Object.assign({}, obj) // clone obj, so we can mutate it\n\n  // support using convenience names, in addition to spec names\n  // (example: `infoHash` for `xt`, `name` for `dn`)\n  if (obj.infoHashBuffer) obj.xt = `urn:btih:${obj.infoHashBuffer.toString('hex')}`\n  if (obj.infoHash) obj.xt = `urn:btih:${obj.infoHash}`\n  if (obj.name) obj.dn = obj.name\n  if (obj.keywords) obj.kt = obj.keywords\n  if (obj.announce) obj.tr = obj.announce\n  if (obj.urlList) {\n    obj.ws = obj.urlList\n    delete obj.as\n  }\n\n  let result = 'magnet:?'\n  Object.keys(obj)\n    .filter(key => key.length === 2)\n    .forEach((key, i) => {\n      const values = Array.isArray(obj[key]) ? obj[key] : [obj[key]]\n      values.forEach((val, j) => {\n        if ((i > 0 || j > 0) && (key !== 'kt' || j === 0)) result += '&'\n\n        if (key === 'dn') val = encodeURIComponent(val).replace(/%20/g, '+')\n        if (key === 'tr' || key === 'xs' || key === 'as' || key === 'ws') {\n          val = encodeURIComponent(val)\n        }\n        if (key === 'kt') val = encodeURIComponent(val)\n\n        if (key === 'kt' && j > 0) result += `+${val}`\n        else result += `${key}=${val}`\n      })\n    })\n\n  return result\n}\n"},"lineCount":134}},"error":null,"hash":"19389b79eea8fc047a65f435f91221b9","cacheData":{"env":{}}}