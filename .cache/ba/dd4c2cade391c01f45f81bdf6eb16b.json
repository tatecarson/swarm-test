{"id":"node_modules/chunk-store-stream/write.js","dependencies":[{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\package.json","includedInParent":true,"mtime":1596059326965},{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\chunk-store-stream\\package.json","includedInParent":true,"mtime":1596059322596},{"name":"block-stream2","loc":{"line":1,"column":28},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\chunk-store-stream\\write.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\block-stream2\\index.js"},{"name":"readable-stream","loc":{"line":2,"column":23},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\chunk-store-stream\\write.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\readable-stream\\readable-browser.js"}],"generated":{"js":"const BlockStream = require('block-stream2')\nconst stream = require('readable-stream')\n\nclass ChunkStoreWriteStream extends stream.Writable {\n  constructor (store, chunkLength, opts = {}) {\n    super(opts)\n\n    if (!store || !store.put || !store.get) {\n      throw new Error('First argument must be an abstract-chunk-store compliant store')\n    }\n    chunkLength = Number(chunkLength)\n    if (!chunkLength) throw new Error('Second argument must be a chunk length')\n\n    this._blockstream = new BlockStream(chunkLength, { zeroPadding: false })\n    this._outstandingPuts = 0\n\n    let index = 0\n    const onData = chunk => {\n      if (this.destroyed) return\n\n      this._outstandingPuts += 1\n      store.put(index, chunk, () => {\n        this._outstandingPuts -= 1\n        if (this._outstandingPuts === 0 && typeof this._finalCb === 'function') {\n          this._finalCb(null)\n          this._finalCb = null\n        }\n      })\n      index += 1\n    }\n\n    this._blockstream\n      .on('data', onData)\n      .on('error', err => { this.destroy(err) })\n  }\n\n  _write (chunk, encoding, callback) {\n    this._blockstream.write(chunk, encoding, callback)\n  }\n\n  _final (cb) {\n    this._blockstream.end()\n    this._blockstream.once('end', () => {\n      if (this._outstandingPuts === 0) cb(null)\n      else this._finalCb = cb\n    })\n  }\n\n  destroy (err) {\n    if (this.destroyed) return\n    this.destroyed = true\n\n    if (err) this.emit('error', err)\n    this.emit('close')\n  }\n}\n\nmodule.exports = ChunkStoreWriteStream\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/chunk-store-stream/write.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/chunk-store-stream/write.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}}],"sources":{"node_modules/chunk-store-stream/write.js":"const BlockStream = require('block-stream2')\nconst stream = require('readable-stream')\n\nclass ChunkStoreWriteStream extends stream.Writable {\n  constructor (store, chunkLength, opts = {}) {\n    super(opts)\n\n    if (!store || !store.put || !store.get) {\n      throw new Error('First argument must be an abstract-chunk-store compliant store')\n    }\n    chunkLength = Number(chunkLength)\n    if (!chunkLength) throw new Error('Second argument must be a chunk length')\n\n    this._blockstream = new BlockStream(chunkLength, { zeroPadding: false })\n    this._outstandingPuts = 0\n\n    let index = 0\n    const onData = chunk => {\n      if (this.destroyed) return\n\n      this._outstandingPuts += 1\n      store.put(index, chunk, () => {\n        this._outstandingPuts -= 1\n        if (this._outstandingPuts === 0 && typeof this._finalCb === 'function') {\n          this._finalCb(null)\n          this._finalCb = null\n        }\n      })\n      index += 1\n    }\n\n    this._blockstream\n      .on('data', onData)\n      .on('error', err => { this.destroy(err) })\n  }\n\n  _write (chunk, encoding, callback) {\n    this._blockstream.write(chunk, encoding, callback)\n  }\n\n  _final (cb) {\n    this._blockstream.end()\n    this._blockstream.once('end', () => {\n      if (this._outstandingPuts === 0) cb(null)\n      else this._finalCb = cb\n    })\n  }\n\n  destroy (err) {\n    if (this.destroyed) return\n    this.destroyed = true\n\n    if (err) this.emit('error', err)\n    this.emit('close')\n  }\n}\n\nmodule.exports = ChunkStoreWriteStream\n"},"lineCount":59}},"error":null,"hash":"0837f478080386070074c241096cd2fd","cacheData":{"env":{}}}