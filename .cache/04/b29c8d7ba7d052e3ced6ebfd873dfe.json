{"id":"node_modules/filestream/read.js","dependencies":[{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\package.json","includedInParent":true,"mtime":1596143871560},{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\filestream\\package.json","includedInParent":true,"mtime":1596059322666},{"name":"readable-stream","loc":{"line":3,"column":29},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\filestream\\read.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\readable-stream\\readable-browser.js"},{"name":"typedarray-to-buffer","loc":{"line":4,"column":25},"parent":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\filestream\\read.js","resolved":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\typedarray-to-buffer\\index.js"}],"generated":{"js":"/* global FileReader */\n\nconst { Readable } = require('readable-stream')\nconst toBuffer = require('typedarray-to-buffer')\n\nclass FileReadStream extends Readable {\n  constructor (file, opts = {}) {\n    super(opts)\n\n    // save the read offset\n    this._offset = 0\n    this._ready = false\n    this._file = file\n    this._size = file.size\n    this._chunkSize = opts.chunkSize || Math.max(this._size / 1000, 200 * 1024)\n\n    // create the reader\n    const reader = new FileReader()\n\n    reader.onload = () => {\n      // get the data chunk\n      this.push(toBuffer(reader.result))\n    }\n    reader.onerror = () => {\n      this.emit('error', reader.error)\n    }\n\n    this.reader = reader\n\n    // generate the header blocks that we will send as part of the initial payload\n    this._generateHeaderBlocks(file, opts, (err, blocks) => {\n      // if we encountered an error, emit it\n      if (err) {\n        return this.emit('error', err)\n      }\n\n      // push the header blocks out to the stream\n      if (Array.isArray(blocks)) {\n        blocks.forEach(block => this.push(block))\n      }\n\n      this._ready = true\n      this.emit('_ready')\n    })\n  }\n\n  _generateHeaderBlocks (file, opts, callback) {\n    callback(null, [])\n  }\n\n  _read () {\n    if (!this._ready) {\n      this.once('_ready', this._read.bind(this))\n      return\n    }\n\n    const startOffset = this._offset\n    let endOffset = this._offset + this._chunkSize\n    if (endOffset > this._size) endOffset = this._size\n\n    if (startOffset === this._size) {\n      this.destroy()\n      this.push(null)\n      return\n    }\n\n    this.reader.readAsArrayBuffer(this._file.slice(startOffset, endOffset))\n\n    // update the stream offset\n    this._offset = endOffset\n  }\n\n  destroy () {\n    this._file = null\n    if (this.reader) {\n      this.reader.onload = null\n      this.reader.onerror = null\n      try { this.reader.abort() } catch (e) {};\n    }\n    this.reader = null\n  }\n}\n\nmodule.exports = FileReadStream\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/filestream/read.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/filestream/read.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}}],"sources":{"node_modules/filestream/read.js":"/* global FileReader */\n\nconst { Readable } = require('readable-stream')\nconst toBuffer = require('typedarray-to-buffer')\n\nclass FileReadStream extends Readable {\n  constructor (file, opts = {}) {\n    super(opts)\n\n    // save the read offset\n    this._offset = 0\n    this._ready = false\n    this._file = file\n    this._size = file.size\n    this._chunkSize = opts.chunkSize || Math.max(this._size / 1000, 200 * 1024)\n\n    // create the reader\n    const reader = new FileReader()\n\n    reader.onload = () => {\n      // get the data chunk\n      this.push(toBuffer(reader.result))\n    }\n    reader.onerror = () => {\n      this.emit('error', reader.error)\n    }\n\n    this.reader = reader\n\n    // generate the header blocks that we will send as part of the initial payload\n    this._generateHeaderBlocks(file, opts, (err, blocks) => {\n      // if we encountered an error, emit it\n      if (err) {\n        return this.emit('error', err)\n      }\n\n      // push the header blocks out to the stream\n      if (Array.isArray(blocks)) {\n        blocks.forEach(block => this.push(block))\n      }\n\n      this._ready = true\n      this.emit('_ready')\n    })\n  }\n\n  _generateHeaderBlocks (file, opts, callback) {\n    callback(null, [])\n  }\n\n  _read () {\n    if (!this._ready) {\n      this.once('_ready', this._read.bind(this))\n      return\n    }\n\n    const startOffset = this._offset\n    let endOffset = this._offset + this._chunkSize\n    if (endOffset > this._size) endOffset = this._size\n\n    if (startOffset === this._size) {\n      this.destroy()\n      this.push(null)\n      return\n    }\n\n    this.reader.readAsArrayBuffer(this._file.slice(startOffset, endOffset))\n\n    // update the stream offset\n    this._offset = endOffset\n  }\n\n  destroy () {\n    this._file = null\n    if (this.reader) {\n      this.reader.onload = null\n      this.reader.onerror = null\n      try { this.reader.abort() } catch (e) {};\n    }\n    this.reader = null\n  }\n}\n\nmodule.exports = FileReadStream\n"},"lineCount":85}},"error":null,"hash":"8a99a525d79f3f0c350ee4450f590086","cacheData":{"env":{}}}