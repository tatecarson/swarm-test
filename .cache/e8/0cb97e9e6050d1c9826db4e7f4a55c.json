{"id":"node_modules/addr-to-ip-port/index.js","dependencies":[{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\package.json","includedInParent":true,"mtime":1596059326965},{"name":"C:\\Users\\Tate\\Documents\\swarm-test\\node_modules\\addr-to-ip-port\\package.json","includedInParent":true,"mtime":1596059321232}],"generated":{"js":"const ADDR_RE = /^\\[?([^\\]]+)\\]?:(\\d+)$/ // ipv4/ipv6/hostname + port\n\nlet cache = {}\n\n// reset cache when it gets to 100,000 elements (~ 600KB of ipv4 addresses)\n// so it will not grow to consume all memory in long-running processes\nlet size = 0\n\nmodule.exports = function addrToIPPort (addr) {\n  if (size === 100000) module.exports.reset()\n  if (!cache[addr]) {\n    const m = ADDR_RE.exec(addr)\n    if (!m) throw new Error(`invalid addr: ${addr}`)\n    cache[addr] = [ m[1], Number(m[2]) ]\n    size += 1\n  }\n  return cache[addr]\n}\n\nmodule.exports.reset = function reset () {\n  cache = {}\n  size = 0\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/addr-to-ip-port/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}}],"sources":{"node_modules/addr-to-ip-port/index.js":"const ADDR_RE = /^\\[?([^\\]]+)\\]?:(\\d+)$/ // ipv4/ipv6/hostname + port\n\nlet cache = {}\n\n// reset cache when it gets to 100,000 elements (~ 600KB of ipv4 addresses)\n// so it will not grow to consume all memory in long-running processes\nlet size = 0\n\nmodule.exports = function addrToIPPort (addr) {\n  if (size === 100000) module.exports.reset()\n  if (!cache[addr]) {\n    const m = ADDR_RE.exec(addr)\n    if (!m) throw new Error(`invalid addr: ${addr}`)\n    cache[addr] = [ m[1], Number(m[2]) ]\n    size += 1\n  }\n  return cache[addr]\n}\n\nmodule.exports.reset = function reset () {\n  cache = {}\n  size = 0\n}\n"},"lineCount":24}},"error":null,"hash":"b1454fc02c973f3ac9f05104295253bd","cacheData":{"env":{}}}